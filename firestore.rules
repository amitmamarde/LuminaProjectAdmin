rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ----------------------------
    // Helper functions
    // ----------------------------

    // Safely read the current user's role.
    function userRole() {
      return request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }

    function isAdmin() {
      return userRole() == 'Admin';
    }

    function isExpert() {
      let r = userRole();
      return r == 'Expert' || r == 'expert';
    }
    
    function isUnclaimed(articleData) {
        return !('expertId' in articleData)
            || articleData.expertId == null
            || articleData.expertId == "";
    }

    // ----------------------------
    // /users collection
    // ----------------------------
    match /users/{userId} {
      // Users can read/update their own profile; Admins can read/update any.
      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Only Admins can create or delete user docs.
      allow create, delete: if isAdmin();
    }

    // ----------------------------
    // /articles collection
    // ----------------------------
    match /articles/{articleId} {

      // Anyone signed-in can read; public can read Published.
      allow read: if request.auth != null || resource.data.status == 'Published';

      // Only Admins can create or delete article docs.
      allow create, delete: if isAdmin();

      // Updates are allowed to Admins, or Experts according to the two flows below.
      allow update: if
        // Admins can update anything.
        isAdmin() ||

        // Expert-specific update permissions.
        (isExpert() && (

          // ---------- CONDITION A: Claiming an article ----------
          (
            // 1) Article must be awaiting expert review and currently unclaimed.
            resource.data.status == 'AwaitingExpertReview' &&
            isUnclaimed(resource.data) &&

            // 2) The expert must assign their own UID.
            request.resource.data.expertId == request.auth.uid &&

            // 3) Status must NOT change during the claim.
            request.resource.data.status == resource.data.status &&

            // 4) *** FINAL FIX ***: Only expertId AND expertDisplayName may change.
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['expertId', 'expertDisplayName'])
          )

          ||

          // ---------- CONDITION B: Submitting a completed review ----------
          (
            // 1) The user must be the assigned expert.
            resource.data.expertId == request.auth.uid &&

            // 2) Current status must be AwaitingExpertReview or NeedsRevision.
            (resource.data.status == 'AwaitingExpertReview' || resource.data.status == 'NeedsRevision') &&

            // 3) Status must advance correctly.
            request.resource.data.status == 'AwaitingAdminReview' &&
            
            // 4) Proactive Fix: Restrict which fields may change during submission to match the app's logic.
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'flashContent', 'deepDiveContent'])
          )
        ));
    }
  }
}
