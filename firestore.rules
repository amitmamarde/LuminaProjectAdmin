rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ----------------------------
    // Helper functions
    // ----------------------------
    function userRole() {
      return request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }
    function isAdmin() {
      return userRole() == 'Admin';
    }
    function isExpert() {
      let r = userRole();
      return r == 'Expert' || r == 'expert';
    }
    function isUnclaimed(articleData) {
        return !('expertId' in articleData)
            || articleData.expertId == null
            || articleData.expertId == "";
    }

    // ----------------------------
    // /users collection
    // ----------------------------
    match /users/{userId} {
      // *** FINAL FIX ***: Separate read and write permissions.
      // Any authenticated user needs to be able to read profile data to see an expert's name.
      allow read: if request.auth != null;

      // Only the user themselves or an Admin can update a profile.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Only Admins can create or delete user docs.
      allow create, delete: if isAdmin();
    }

    // ----------------------------
    // /articles collection
    // ----------------------------
    match /articles/{articleId} {
      allow read: if request.auth != null || resource.data.status == 'Published';
      allow create, delete: if isAdmin();

      allow update: if
        isAdmin() ||
        (isExpert() && (
          // --- CONDITION A: Claiming an article ---
          (
            resource.data.status == 'AwaitingExpertReview' &&
            isUnclaimed(resource.data) &&
            request.resource.data.expertId == request.auth.uid &&
            request.resource.data.status == resource.data.status &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['expertId', 'expertDisplayName'])
          )
          ||
          // --- CONDITION B: Submitting a completed review ---
          (
            resource.data.expertId == request.auth.uid &&
            (resource.data.status == 'AwaitingExpertReview' || resource.data.status == 'NeedsRevision') &&
            request.resource.data.status == 'AwaitingAdminReview' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'flashContent', 'deepDiveContent'])
          )
          ||
          // --- CONDITION C: Saving a draft ---
          (
            resource.data.expertId == request.auth.uid &&
            (resource.data.status == 'AwaitingExpertReview' || resource.data.status == 'NeedsRevision') &&
            request.resource.data.status == resource.data.status &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['flashContent', 'deepDiveContent'])
          )
        ));
    }
  }
}
