rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    function isAdmin() {
      return request.auth != null && getUserData(request.auth.uid).role == 'Admin';
    }
    function isExpert() {
      return request.auth != null && getUserData(request.auth.uid).role == 'Expert';
    }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create, delete: if isAdmin();
    }

    match /articles/{articleId} {
      allow read: if request.auth != null || resource.data.status == 'Published';
      allow create, delete: if isAdmin();

      allow update: if
        // Admins can update anything.
        isAdmin() ||

        // Experts have specific update permissions.
        (isExpert() && (

            // --- CONDITION A: Claiming an article. THIS IS THE FINAL FIX. ---
            (
              // 1. Pre-conditions: Article must be in the correct state and unclaimed.
              resource.data.status == 'AwaitingExpertReview' &&
              resource.data.expertId == null &&

              // 2. Core Validation: The user is writing their own ID.
              request.resource.data.expertId == request.auth.uid &&

              // 3. Protection: Ensure the status is not being changed during the claim.
              request.resource.data.status == resource.data.status
            )

            || // OR

            // --- CONDITION B: Submitting a completed review. ---
            (
              // 1. Pre-conditions: The user must be the assigned expert.
              resource.data.expertId == request.auth.uid &&
              (resource.data.status == 'AwaitingExpertReview' || resource.data.status == 'NeedsRevision') &&

              // 2. Validation: The status must be correctly advanced.
              request.resource.data.status == 'AwaitingAdminReview'
            )
        ));
    }
  }
}
