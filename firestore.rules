rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Function to get the data of a user from the 'users' collection.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Function to check if the requesting user is an Admin.
    function isAdmin() {
      return request.auth != null && getUserData(request.auth.uid).role == 'Admin';
    }

    // Function to check if the requesting user is an Expert.
    function isExpert() {
      return request.auth != null && getUserData(request.auth.uid).role == 'Expert';
    }

    // --- Collection Rules ---

    // Rules for the 'users' collection (user profiles).
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create, delete: if isAdmin();
    }

    // Rules for the 'articles' collection.
    match /articles/{articleId} {
      allow read: if request.auth != null || resource.data.status == 'Published';
      allow create, delete: if isAdmin();

      // Update rules define who can change an article and when.
      allow update: if
        // 1. Admins can update any article at any stage.
        isAdmin() ||

        // 2. Experts can update an article under specific conditions.
        (isExpert() && (
            // CONDITION A: Claiming an article. THIS IS THE FIX.
            // An expert can claim an article if it's ready for review and unclaimed.
            (
              resource.data.status == 'AwaitingExpertReview' &&
              resource.data.expertId == null &&
              // This is the crucial part: it ensures ONLY these two fields are being changed.
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['expertId', 'expertDisplayName']) &&
              // It still validates the content of those fields for security.
              request.resource.data.expertId == request.auth.uid &&
              request.resource.data.expertDisplayName == getUserData(request.auth.uid).displayName
            ) ||

            // CONDITION B: Editing an article they already own.
            // An expert can submit their review if they are the owner and the article is in the correct state.
            (
              resource.data.expertId == request.auth.uid &&
              (resource.data.status == 'AwaitingExpertReview' || resource.data.status == 'NeedsRevision') &&
              // They can only update the content fields and change the status to 'AwaitingAdminReview'.
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['flashContent', 'deepDiveContent', 'status']) &&
              request.resource.data.status == 'AwaitingAdminReview'
            )
        ));
    }
  }
}
